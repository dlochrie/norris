#!/usr/bin/env node
var _ = require('lodash');
var async = require('async');
var fs = require('fs');
var glob = require('glob');
var jade = require('jade');
var minify = require('html-minifier').minify;


glob('client/src/app/**/*.{jade,html}', function(err, files) {
  if (err) console.log(err);

  var templates = [];

  function readAsync(file, callback) {
    fs.readFile(file, 'utf8', callback);
  }

  async.map(files, readAsync, function(err, results) {
    if (err) console.log(err);
    templates = files.map(function(file, index) {
      var f = {path: file.replace(/client\/src\/app\/(.*?)$/, '$1')};

      if (file.split('.').pop() === 'jade') {
        f.path = f.path.replace(/^(.*?)\.jade/, '$1.html');
        f.contents = jade.render(results[index]);
      } else {
        f.contents = minify(results[index], {collapseWhitespace: true});
      }
      f.contents.replace(/'/g, '\\\'');
      return f;
    });

    fs.readFile('stuff/template-cache.js.tpl', 'utf8', function(err, contents) {
      if (err) console.log(err);
      fs.exists('generated', function(exists) {
        if (!exists) {
          fs.mkdirSync('generated', function(err) {
            if (err) console.log(err);
          });
        }
        fs.writeFile('generated/template-cache.js', _.template(
            contents, {templates: templates}), function(err) {
              if (err) console.log(err);
              console.log('generated/template-cache.js > generated/template-cache.js');
            });
      });
    });
  });
});
